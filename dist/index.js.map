{"version":3,"sources":["../src/index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  func, string, oneOfType, number, bool,\n} from 'prop-types';\n\nconst styles={\n  inlineEdit: {\n    textDecoration: 'underline dotted',\n    cursor: 'pointer',\n  },\n  inputWrapper: {\n    position: 'relative',\n  },\n  inputWrapperInput: {\n    width: '100%',\n    margin: 0,\n    padding: '.5rem',\n  },\n  inputWrapperActions: {\n    position: 'absolute',\n    width: '100%',\n    display: 'flex',\n    color: 'white',\n  },\n  inputWrapperActionsButton: {\n    flex: '0 0 50%',\n    border: 'none',\n    padding: '.5rem',\n    color: 'white',\n    textTransform: 'uppercase',\n  },\n};\n\n/**\n * InlineEdit component\n */\nclass InlineEdit extends PureComponent {\n  /**\n   * Component constructor\n   * @param  {object} props initial props\n   * @return {void}\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n      edit: false,\n    };\n\n    this.toggleMode = this.toggleMode.bind(this);\n    this.cancel = this.cancel.bind(this);\n    this.save = this.save.bind(this);\n    this.change = this.change.bind(this);\n    this.input = React.createRef();\n  }\n\n  /**\n   * @param  {object} nextProps Props sent by the parent component.\n   * @return {void}\n   */\n  componentDidUpdate() {\n    if (!this.props.updateOnNewProps) {\n      return;\n    }\n\n    this.setState({\n      value: this.props.value,\n    });\n  }\n\n  /**\n   * Toggle Edit and view modes\n   * @param  {boolean} edit\n   * @return {void}\n   */\n  toggleMode(edit) {\n    this.setState({ edit }, () => {\n      if (edit && this.input.current) {\n        this.input.current.focus();\n      }\n    });\n  }\n\n  /**\n   * @return {void}\n   */\n  save() {\n    this.setState({\n      edit: false,\n    }, () => this.props.onSave(this.state.value));\n  }\n\n  /**\n   * @return {void}\n   */\n  cancel() {\n    this.setState({\n      edit: false,\n      value: this.props.value,\n    });\n  }\n\n  /**\n   * @param  {object} ev Event returned by the input\n   * @return {void}\n   */\n  change(ev) {\n    this.setState({\n      value: ev.target.value,\n    });\n  }\n\n  /**\n   * @return {void}\n   */\n  render() {\n    const Tag = this.props.tag;\n    const Input = this.props.type === 'textarea' ? 'textarea' : 'input';\n\n\n    return (\n      <div className=\"inline-edit\" style={styles.inlineEdit}>\n        {this.state.edit ?\n          <div className=\"input-wrapper\" style={styles.inputWrapper}>\n            <Input\n              style={styles.inputWrapperInput}\n              type={this.props.type}\n              value={this.state.value}\n              onChange={this.change}\n            />\n            <div className=\"actions\" style={styles.inputWrapperActions}>\n              <button\n                style={{\n                  ...styles.inputWrapperActionsButton,\n                  backgroundColor: this.props.saveColor,\n                }}\n                className=\"save\"\n                onClick={this.save}\n              >{this.props.saveLabel}</button>\n              <button\n                style={{\n                  ...styles.inputWrapperActionsButton,\n                  backgroundColor: this.props.cancelColor,\n                }}\n                className=\"cancel\"\n                onClick={this.cancel}\n              >{this.props.cancelLabel}</button>\n            </div>\n          </div> :\n          <Tag\n            ref={this.input}\n            className=\"tag-wrapper\"\n            onClick={() => this.toggleMode(true)}\n          >\n            {this.state.value}\n          </Tag>\n        }\n      </div>\n    );\n  }\n}\n\nInlineEdit.propTypes = {\n  value: oneOfType([string, number]),\n  tag: string,\n  type: string,\n  onSave: func,\n  updateOnNewProps: bool,\n  saveColor: string,\n  saveLabel: string,\n  cancelColor: string,\n  cancelLabel: string,\n};\n\nInlineEdit.defaultProps = {\n  value: '',\n  tag: 'span',\n  type: 'text',\n  onSave: null,\n  updateOnNewProps: false,\n  saveColor: 'blue',\n  saveLabel: 'Save',\n  cancelColor: 'red',\n  cancelLabel: 'Cancel',\n};\n\nexport default InlineEdit;\n"]}