{"version":3,"sources":["../src/index.jsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  func, string, oneOfType, number, bool,\n} from 'prop-types';\n\nconst styles={\n  inlineEdit: {\n    textDecoration: 'underline dotted',\n    cursor: 'pointer',\n  },\n  inputWrapper: {\n    position: 'relative',\n  },\n  inputWrapperInput: {\n    width: '100%',\n    margin: 0,\n    padding: '.5rem',\n  },\n  inputWrapperActions: {\n    position: 'absolute',\n    width: '100%',\n    display: 'flex',\n    color: 'white',\n  },\n  inputWrapperActionsButton: {\n    flex: '0 0 50%',\n    border: 'none',\n    padding: '.5rem',\n    color: 'white',\n    textTransform: 'uppercase',\n  },\n};\n\nconst getValueByType = (value, type) => {\n  if (type === 'number') {\n    try {\n      const number = Number(value);\n      if (Number.isNaN(number)) {\n        return null;\n      }\n\n      return number;\n    } catch (e) {\n      return value;\n    }\n  }\n\n  return value;\n};\n\n/**\n * @param  {any} value passed in.\n * @param  {function} format Function used to format value.\n * @return {any} initial value or formated value\n */\nconst getFormatedValue = (value, format) => {\n  if (!format) {\n    return value;\n  }\n\n  return format(value);\n};\n\n/**\n * InlineEdit component\n */\nclass InlineEdit extends PureComponent {\n  /**\n   * Component constructor\n   * @param  {object} props initial props\n   * @return {void}\n   */\n  constructor(props) {\n    super(props);\n    const {\n      value,\n      type,\n    } = this.props;\n    const valueToUse = getValueByType(value, type);\n\n    this.state = {\n      value: valueToUse,\n      edit: false,\n    };\n\n    this.toggleMode = this.toggleMode.bind(this);\n    this.cancel = this.cancel.bind(this);\n    this.save = this.save.bind(this);\n    this.change = this.change.bind(this);\n    this.input = React.createRef();\n  }\n\n  /**\n   * @param  {object} nextProps Props sent by the parent component.\n   * @return {void}\n   */\n  componentDidUpdate() {\n    const {\n      updateOnNewProps,\n      value,\n    } = this.props;\n\n    const {\n      edit,\n    } = this.state;\n\n    if (!updateOnNewProps) {\n      return;\n    }\n\n    if (edit) {\n      return;\n    }\n\n    this.setState({\n      value: value,\n    });\n  }\n\n  /**\n   * Toggle Edit and view modes\n   * @param  {boolean} edit\n   * @return {void}\n   */\n  toggleMode(edit) {\n    this.setState({ edit }, () => {\n      if (edit && this.input.current) {\n        this.input.current.focus();\n      }\n    });\n  }\n\n  /**\n   * @return {void}\n   */\n  save() {\n    this.setState({\n      edit: false,\n    }, () => this.props.onSave(this.state.value));\n  }\n\n  /**\n   * @return {void}\n   */\n  cancel() {\n    this.setState({\n      edit: false,\n      value: this.props.value,\n    });\n  }\n\n  /**\n   * @param  {object} ev Event returned by the input\n   * @return {void}\n   */\n  change(ev) {\n    const {\n      type,\n    } = this.props;\n    this.setState({\n      value: getValueByType(ev.target.value, type),\n    });\n  }\n\n  /**\n   * @return {void}\n   */\n  render() {\n    const {\n      tag,\n      type,\n      format,\n    } = this.props;\n\n    const {\n      value,\n    } = this.state;\n\n    const Tag = tag;\n    const Input = type === 'textarea' ? 'textarea' : 'input';\n\n    return (\n      <div className=\"inline-edit\" style={styles.inlineEdit}>\n        {this.state.edit ?\n          <div className=\"input-wrapper\" style={styles.inputWrapper}>\n            <Input\n              style={styles.inputWrapperInput}\n              type={this.props.type}\n              value={this.state.value}\n              onChange={this.change}\n            />\n            <div className=\"actions\" style={styles.inputWrapperActions}>\n              <button\n                style={{\n                  ...styles.inputWrapperActionsButton,\n                  backgroundColor: this.props.saveColor,\n                }}\n                className=\"save\"\n                onClick={this.save}\n              >{this.props.saveLabel}</button>\n              <button\n                style={{\n                  ...styles.inputWrapperActionsButton,\n                  backgroundColor: this.props.cancelColor,\n                }}\n                className=\"cancel\"\n                onClick={this.cancel}\n              >{this.props.cancelLabel}</button>\n            </div>\n          </div> :\n          <Tag\n            ref={this.input}\n            className=\"tag-wrapper\"\n            onClick={() => this.toggleMode(true)}\n          >\n            {\n              getFormatedValue(value, format)\n            }\n          </Tag>\n        }\n      </div>\n    );\n  }\n}\n\nInlineEdit.propTypes = {\n  value: oneOfType([string, number]),\n  format: func,\n  tag: string,\n  type: string,\n  onSave: func,\n  updateOnNewProps: bool,\n  saveColor: string,\n  saveLabel: string,\n  cancelColor: string,\n  cancelLabel: string,\n  getValue: func,\n};\n\nInlineEdit.defaultProps = {\n  value: '',\n  format: null,\n  tag: 'span',\n  type: 'text',\n  onSave: null,\n  updateOnNewProps: false,\n  saveColor: 'blue',\n  saveLabel: 'Save',\n  cancelColor: 'red',\n  cancelLabel: 'Cancel',\n  getValue: null,\n};\n\nexport default InlineEdit;\n"]}